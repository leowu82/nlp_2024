# -*- coding: utf-8 -*-
"""nlp_hw2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JftrIuqjIQl1ygVgLqtaujlGfxDrA8nm

# LSTM-arithmetic

## Dataset
- [Arithmetic dataset](https://drive.google.com/file/d/1cMuL3hF9jefka9RyF4gEBIGGeFGZYHE-/view?usp=sharing)
"""

# ! pip install seaborn
# ! pip install opencc
# ! pip install -U scikit-learn

import numpy as np
import pandas as pd
import torch
import torch.nn
import torch.nn.utils.rnn
import torch.utils.data
# import matplotlib.pyplot as plt
# import seaborn as sns
# import opencc
import os
# from sklearn.model_selection import train_test_split
from tqdm import tqdm

data_path = './data'

df_train = pd.read_csv(os.path.join(data_path, 'arithmetic_train.csv'))
df_eval = pd.read_csv(os.path.join(data_path, 'arithmetic_eval.csv'))

df_train = df_train.iloc[:, 1:]
df_eval = df_eval.iloc[:, 1:]

df_train.head()

# # shuffle df_train and use only 20% of it
# df_train = df_train.sample(frac=0.2)

# # re-index
# df_train = df_train.reset_index(drop=True)

# print its size
print(len(df_train))

# transform the input data to string
df_train['tgt'] = df_train['tgt'].apply(lambda x: str(x))
# df_train['src'] = df_train['src'].add(df_train['tgt'])
# df_train['len'] = df_train['src'].apply(lambda x: len(x))

df_eval['tgt'] = df_eval['tgt'].apply(lambda x: str(x))
# df_eval['src'] = df_eval['src'].add(df_eval['tgt'])
# df_eval['len'] = df_eval['src'].apply(lambda x: len(x))

"""# Build Dictionary
 - The model cannot perform calculations directly with plain text.
 - Convert all text (numbers/symbols) into numerical representations.
 - Special tokens
    - '&lt;pad&gt;'
        - Each sentence within a batch may have different lengths.
        - The length is padded with '&lt;pad&gt;' to match the longest sentence in the batch.
    - '&lt;eos&gt;'
        - Specifies the end of the generated sequence.
        - Without '&lt;eos&gt;', the model will not know when to stop generating.
"""

char_to_id = {}
id_to_char = {}

# write your code here
# Build a dictionary and give every token in the train dataset an id
# The dictionary should contain <eos> and <pad>
# char_to_id is to convert charactors to ids, while id_to_char is the opposite

from tqdm import tqdm

# <pad> and <bos> and <eos>
next_idx = 0
for char in ['<pad>', '<eos>']:
    char_to_id[char] = next_idx
    id_to_char[next_idx] = char
    next_idx += 1

# add 0~9 and '+-*()=' to dictionary
for i in range(10):
    char_to_id[str(i)] = next_idx
    id_to_char[next_idx] = str(i)
    next_idx += 1

for op in ['+', '-', '*', '(', ')', '=']:
    char_to_id[op] = next_idx
    id_to_char[next_idx] = op
    next_idx += 1


vocab_size = len(char_to_id)
print('Vocab size{}'.format(vocab_size))

for i in range(0,vocab_size):
    print(id_to_char[i])

"""# Data Preprocessing
 - The data is processed into the format required for the model's input and output.
 - Example: 1+2-3=0
     - Model input: 1 + 2 - 3 = 0
     - Model output: / / / / / 0 &lt;eos&gt;  (the '/' can be replaced with &lt;pad&gt;)
     - The key for the model's output is that the model does not need to predict the next character of the previous part. What matters is that once the model sees '=', it should start generating the answer, which is '0'. After generating the answer, it should also generate&lt;eos&gt;

"""

# Write your code here
def preprocess_data(df):
    char_id_lists = []
    label_id_lists = []

    for idx, row in tqdm(df.iterrows(), total=len(df)):
        char_id_list = []
        label_id_list = []

        # Process src up to and including '='
        for char in row['src']:
            char_id_list.append(char_to_id[char])
            label_id_list.append(char_to_id['<pad>'])

        # Process tgt
        for char in row['tgt']:
            char_id_list.append(char_to_id[char])
            label_id_list.append(char_to_id[char])

        char_id_list.append(char_to_id['<eos>'])  # eos
        label_id_list.append(char_to_id['<eos>'])  # eos

        char_id_lists.append(char_id_list)
        label_id_lists.append(label_id_list)

    df['char_id_list'] = char_id_lists
    df['label_id_list'] = label_id_lists
    return df

# Preprocess train and eval datasets
df_train = preprocess_data(df_train)
df_eval = preprocess_data(df_eval)

df_train.head()

print(df_train['char_id_list'][0][:-1])
print(df_train['label_id_list'][0][1:])

"""# Hyper Parameters

|Hyperparameter|Meaning|Value|
|-|-|-|
|`batch_size`|Number of data samples in a single batch|64|
|`epochs`|Total number of epochs to train|10|
|`embed_dim`|Dimension of the word embeddings|256|
|`hidden_dim`|Dimension of the hidden state in each timestep of the LSTM|256|
|`lr`|Learning Rate|0.001|
|`grad_clip`|To prevent gradient explosion in RNNs, restrict the gradient range|1|
"""

batch_size = 64
epochs = 2
embed_dim = 256
hidden_dim = 256
lr = 0.001
grad_clip = 1

"""# Data Batching
- Use `torch.utils.data.Dataset` to create a data generation tool called  `dataset`.
- The, use `torch.utils.data.DataLoader` to randomly sample from the `dataset` and group the samples into batches.
"""

class Dataset(torch.utils.data.Dataset):
    def __init__(self, sequences):
        self.sequences = sequences

    def __len__(self):
        # return the amount of data
        return len(self.sequences)

    def __getitem__(self, index):
        # Teacher forcing
        # Input don't need last char
        x = self.sequences['char_id_list'][index][:-1]
        # Output need to shift right one
        y = self.sequences['label_id_list'][index][1:]
        return x, y

# collate function, used to build dataloader
def collate_fn(batch):
    batch_x = [torch.tensor(data[0]) for data in batch]
    batch_y = [torch.tensor(data[1]) for data in batch]
    batch_x_lens = torch.LongTensor([len(x) for x in batch_x])
    batch_y_lens = torch.LongTensor([len(y) for y in batch_y])

    # Pad the input sequences to the same length within the batch
    pad_batch_x = torch.nn.utils.rnn.pad_sequence(batch_x,
                                                  batch_first=True,
                                                  padding_value=char_to_id['<pad>'])

    pad_batch_y = torch.nn.utils.rnn.pad_sequence(batch_y,
                                                  batch_first=True,
                                                  padding_value=char_to_id['<pad>'])

    return pad_batch_x, pad_batch_y, batch_x_lens, batch_y_lens

ds_train = Dataset(df_train[['char_id_list', 'label_id_list']])
ds_eval = Dataset(df_eval[['char_id_list', 'label_id_list']])

# Build dataloader of train set and eval set, collate_fn is the collate function
from torch.utils.data import DataLoader
import multiprocessing as mp

workers = mp.cpu_count() - 1

dl_train = DataLoader(
    ds_train,
    batch_size=batch_size,      # how many samples per batch to load
    shuffle=True,               # data reshuffled at every epoch
    collate_fn=collate_fn,      # custom collate function for batching
    num_workers=workers,  # Add workers for parallel data loading
    # pin_memory=True,  # Helps accelerate data transfer to GPU
    # persistent_workers=True  # Keep workers alive between epochs
)

dl_eval = DataLoader(
    ds_eval,
    batch_size=batch_size,      # how many samples per batch to load
    shuffle=True,               # data reshuffled at every epoch
    collate_fn=collate_fn,      # custom collate function for batching
    num_workers=workers,  # Add workers for parallel data loading
    # pin_memory=True,  # Helps accelerate data transfer to GPU
    # persistent_workers=True  # Keep workers alive between epochs
)

# # extract data from dataloader and print to see their shapes
# i = 0
# for batch_x, batch_y, batch_x_lens, batch_y_lens in dl_train:
#     i += 1
#     if (i == 2): break
#     print(batch_x)
#     print(batch_x_lens)
#     print(batch_y)
#     print(batch_y_lens)

"""# Model Design

## Execution Flow
1. Convert all characters in the sentence into embeddings.
2. Pass the embeddings through an LSTM sequentially.
3. The output of the LSTM is passed into another LSTM, and additional layers can be added.
4. The output from all time steps of the final LSTM is passed through a Fully Connected layer.
5. The character corresponding to the maximum value across all output dimensions is selected as the next character.

## Loss Function
Since this is a classification task, Cross Entropy is used as the loss function.

## Gradient Update
Adam algorithm is used for gradient updates.
"""

class CharRNN(torch.nn.Module):
    def __init__(self, vocab_size, embed_dim, hidden_dim):
        super(CharRNN, self).__init__()

        self.embedding = torch.nn.Embedding(num_embeddings=vocab_size,
                                            embedding_dim=embed_dim,
                                            padding_idx=char_to_id['<pad>'])

        self.rnn_layer1 = torch.nn.LSTM(input_size=embed_dim,
                                        hidden_size=hidden_dim,
                                        batch_first=True)

        self.rnn_layer2 = torch.nn.LSTM(input_size=hidden_dim,
                                        hidden_size=hidden_dim,
                                        batch_first=True)

        self.linear = torch.nn.Sequential(torch.nn.Linear(in_features=hidden_dim,
                                                          out_features=hidden_dim),
                                          torch.nn.ReLU(),
                                          torch.nn.Linear(in_features=hidden_dim,
                                                          out_features=vocab_size))

    def forward(self, batch_x, batch_x_lens):
        return self.encoder(batch_x, batch_x_lens)

    # The forward pass of the model
    def encoder(self, batch_x, batch_x_lens):
        batch_x = self.embedding(batch_x)

        batch_x = torch.nn.utils.rnn.pack_padded_sequence(batch_x,
                                                          batch_x_lens,
                                                          batch_first=True,
                                                          enforce_sorted=False)

        batch_x, _ = self.rnn_layer1(batch_x)
        batch_x, _ = self.rnn_layer2(batch_x)

        batch_x, _ = torch.nn.utils.rnn.pad_packed_sequence(batch_x,
                                                            batch_first=True)

        batch_x = self.linear(batch_x)

        return batch_x

    def generator(self, start_char, max_len=200):

        char_list = [char_to_id[c] for c in start_char]

        next_char = None

        while len(char_list) < max_len:
            # Write your code here
            # Pack the char_list to tensor
            # Input the tensor to the embedding layer, LSTM layers, linear respectively
            # Obtain the next token prediction y
            y = self.encoder(torch.tensor([char_list]), torch.tensor([len(char_list)]))

            next_char = torch.argmax(y[0, -1]).item() # item: tensor(val) -> val

            if next_char == char_to_id['<eos>']:
                break

            char_list.append(next_char)

        return [id_to_char[ch_id] for ch_id in char_list]

torch.manual_seed(2)

# Write your code here. Specify a device (cuda or cpu)
device = 'cuda' if torch.cuda.is_available() else 'cpu'

model = CharRNN(vocab_size,
                embed_dim,
                hidden_dim)

# Write your code here. Cross-entropy loss function. The loss function should ignore <pad>
criterion = torch.nn.CrossEntropyLoss(ignore_index=char_to_id['<pad>'])
# Write your code here. Use Adam or AdamW for Optimizer
optimizer = torch.optim.Adam(model.parameters(), lr=lr)

"""# Training
1. The outer `for` loop controls the `epoch`
    1. The inner `for` loop uses `data_loader` to retrieve batches.
        1. Pass the batch to the `model` for training.
        2. Compare the predicted results `batch_pred_y` with the true labels `batch_y` using Cross Entropy to calculate the loss `loss`
        3. Use `loss.backward` to automatically compute the gradients.
        4. Use `torch.nn.utils.clip_grad_value_` to limit the gradient values between `-grad_clip` &lt; and &lt; `grad_clip`.
        5. Use `optimizer.step()` to update the model (backpropagation).
2.  After every `1000` batches, output the current loss to monitor whether it is converging.
"""

from tqdm import tqdm
from copy import deepcopy
import torch.nn.functional as F

model = model.to(device)
model.train()

i = 0
for epoch in range(1, epochs+1):
    # The process bar
    bar = tqdm(dl_train, desc=f"Train epoch {epoch}")
    for batch_x, batch_y, batch_x_lens, batch_y_lens in bar:
        # Write your code here
        batch_x = batch_x.to(device)
        batch_y = batch_y.to(device)
        batch_x_lens = batch_x_lens.to(device)
        batch_y_lens = batch_y_lens.to(device)

        # Clear the gradient
        optimizer.zero_grad()

        # Get prediction
        batch_y_pred = model(batch_x, batch_x_lens)

        # batch_y dimension is [batch_size, sequence_size]
        # batch_y_pred dimension is [batch_size, sequence_size, vocab_size]
        batch_y = batch_y.view(-1)
        batch_y_pred = batch_y_pred.view(-1, batch_y_pred.size(-1))

        # # Print value
        # print(batch_y_pred)
        # print(batch_y)

        # Input the prediction and ground truths to loss function
        loss = criterion(batch_y_pred, batch_y)

        # Back propagation
        loss.backward()

        # Gradient clipping
        torch.nn.utils.clip_grad_value_(model.parameters(), grad_clip)

        # Write your code here
        # Optimize parameters in the model
        optimizer.step()

        i+=1
        if i%1000==0:
            bar.set_postfix(loss = loss.item())

    # Evaluate your model
    bar = tqdm(dl_eval, desc=f"Validation epoch {epoch}")
    model.eval()
    matched = 0
    total = 0
    with torch.no_grad(): # No gradient calc and back prop
        for batch_x, batch_y, batch_x_lens, batch_y_lens in bar:
            # Write your code here. Input the batch_x to the model and generate the predictions
            batch_x = batch_x.to(device)
            batch_y = batch_y.to(device)
            batch_x_lens = batch_x_lens.to(device)
            batch_y_lens = batch_y_lens.to(device)

            predictions = model(batch_x, batch_x_lens)

            # Write your code here.
            # Check whether the prediction match the ground truths
            # Compute exact match (EM) on the eval dataset
            # EM = correct/total
            matched += torch.sum(torch.argmax(predictions, dim=2) == batch_y).item()
            total += torch.sum(batch_y_lens).item()

    print(matched/total)

# save model
torch.save(model.state_dict(), 'model.pth')

"""# Generation
Use `model.generator` and provide an initial character to automatically generate a sequence.
"""

model = model.to("cpu")
print("".join(model.generator('1+1=')))